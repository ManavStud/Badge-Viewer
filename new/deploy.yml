name: Badge Viewer CI/CD

on:
  push:
    branches: [main, master]  # Add your main branch name
  pull_request:
    branches: [main, master]  # Add your main branch name
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test --if-present
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MONGO_URI: ${{ secrets.TEST_MONGO_URI }}

  build-and-deploy:
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Create deployment package
        run: |
          # Install dependencies
          npm ci
          
          # Build the React app
          npm run build
          
          # Create zip file excluding unnecessary files
          zip -r deploy.zip . -x "*.git*" "node_modules/*" "build/*"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: badge-viewer-package
          path: deploy.zip
      
      - name: Copy files to Azure VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.AZURE_VM_PEM }}
          source: "deploy.zip"
          target: "/home/${{ secrets.SERVER_USER }}"
      
      - name: Deploy on Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.AZURE_VM_PEM }}
          script: |
            # Create app directory if it doesn't exist
            mkdir -p /home/${{ secrets.SERVER_USER }}/badge-viewer
            
            # Navigate to the app directory
            cd /home/${{ secrets.SERVER_USER }}/badge-viewer
            
            # Unzip the deployment package
            unzip -o /home/${{ secrets.SERVER_USER }}/deploy.zip
            
            # Install PM2 if not already installed
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi
            
            # Install dependencies
            npm ci
            
            # Add environment variables to a .env file
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "PORT=5000" >> .env
            
            # Start or restart backend server with PM2
            pm2 describe badge-viewer-backend > /dev/null
            if [ $? -eq 0 ]; then
              # Restart if already exists
              pm2 restart badge-viewer-backend
            else
              # Start the server
              pm2 start server.js --name "badge-viewer-backend" --env production
            fi
            
            # Start or restart frontend with PM2 (if you're serving the React build separately)
            cd build
            pm2 describe badge-viewer-frontend > /dev/null
            if [ $? -eq 0 ]; then
              # Restart if already exists
              pm2 restart badge-viewer-frontend
            else
              # Use a simple HTTP server to serve the static files
              pm2 start npm --name "badge-viewer-frontend" -- start
            fi
            
            # Save PM2 configuration
            pm2 save
            
            # Set up PM2 to start on system boot
            pm2 startup
            
            # Clean up
            rm -f /home/${{ secrets.SERVER_USER }}/deploy.zip
