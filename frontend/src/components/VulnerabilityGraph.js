"use client";
import { useEffect, useState } from "react";
import { TimerIcon, TrendingUp, Loader2 } from "lucide-react";

import * as React from "react";
import {
  Area,
  AreaChart,
  Bar,
  BarChart,
  CartesianGrid,
  XAxis,
  YAxis,
} from "recharts";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  ChartConfig,
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";

export const description = "An interactive bar chart";

const chartData = [
  {
    date: "2014",
    Total: 3425,
    Overflow: 1100,
    Memory_Corruption: 800,
    SQL_Injection: 200,
    XSS: 650,
    Directory_Traversal: 150,
    File_Inclusion: 225,
    CSRF: 150,
    XXE: 50,
    SSRF: 100
  },
  {
    date: "2015",
    Total: 3680,
    Overflow: 800,
    Memory_Corruption: 1000,
    SQL_Injection: 250,
    XSS: 850,
    Directory_Traversal: 180,
    File_Inclusion: 250,
    CSRF: 175,
    XXE: 75,
    SSRF: 100
  },
  {
    date: "2016",
    Total: 3950,
    Overflow: 500,
    Memory_Corruption: 1200,
    SQL_Injection: 300,
    XSS: 1100,
    Directory_Traversal: 200,
    File_Inclusion: 275,
    CSRF: 175,
    XXE: 100,
    SSRF: 100
  },
  {
    date: "2017",
    Total: 5900,
    Overflow: 2500,
    Memory_Corruption: 1500,
    SQL_Injection: 400,
    XSS: 600,
    Directory_Traversal: 250,
    File_Inclusion: 275,
    CSRF: 175,
    XXE: 100,
    SSRF: 100
  },
  {
    date: "2018",
    Total: 6350,
    Overflow: 2000,
    Memory_Corruption: 2000,
    SQL_Injection: 450,
    XSS: 800,
    Directory_Traversal: 300,
    File_Inclusion: 400,
    CSRF: 200,
    XXE: 100,
    SSRF: 100
  },
  {
    date: "2019",
    Total: 6900,
    Overflow: 1200,
    Memory_Corruption: 2000,
    SQL_Injection: 600,
    XSS: 1800,
    Directory_Traversal: 350,
    File_Inclusion: 450,
    CSRF: 250,
    XXE: 125,
    SSRF: 125
  },
  {
    date: "2020",
    Total: 7250,
    Overflow: 1200,
    Memory_Corruption: 2200,
    SQL_Injection: 650,
    XSS: 1800,
    Directory_Traversal: 400,
    File_Inclusion: 450,
    CSRF: 275,
    XXE: 150,
    SSRF: 125
  },
  {
    date: "2021",
    Total: 9875,
    Overflow: 1500,
    Memory_Corruption: 2500,
    SQL_Injection: 800,
    XSS: 2800,
    Directory_Traversal: 600,
    File_Inclusion: 700,
    CSRF: 500,
    XXE: 175,
    SSRF: 300
  },
  {
    date: "2022",
    Total: 12800,
    Overflow: 1800,
    Memory_Corruption: 3400,
    SQL_Injection: 1800,
    XSS: 3400,
    Directory_Traversal: 750,
    File_Inclusion: 800,
    CSRF: 400,
    XXE: 200,
    SSRF: 250
  },
  {
    date: "2023",
    Total: 15900,
    Overflow: 1800,
    Memory_Corruption: 2600,
    SQL_Injection: 2000,
    XSS: 5200,
    Directory_Traversal: 1400,
    File_Inclusion: 1500,
    CSRF: 600,
    XXE: 300,
    SSRF: 500
  },
  {
    date: "2024",
    Total: 18300,
    Overflow: 1800,
    Memory_Corruption: 2500,
    SQL_Injection: 2200,
    XSS: 7400,
    Directory_Traversal: 1500,
    File_Inclusion: 1600,
    CSRF: 600,
    XXE: 300,
    SSRF: 400
  }
];

const chartConfig = {
  views: {
    label: "Vulnerabilty",
  },
  Total: {
    label: "Total",
    color: "hsl(var(--chart-1))",
  },
  "Overflow": {
    label: "Overflow",
    color: "hsl(var(--chart-2))",
  },
  "Memory Corruption": {
    label: "Memory Corruption",
    color: "hsl(var(--chart-3))",
  },
  "SQL Injection": {
    label: "SQL Injection",
    color: "hsl(var(--chart-4))",
  },
  XSS: {
    label: "XSS",
    color: "hsl(var(--chart-5))",
  },
  "Directory Traversal": {
    label: "Dirctory Traversal",
    color: "hsl(var(--chart-1))",
  },
  "File Inclusion": {
    label: "File Inclusion",
    color: "hsl(var(--chart-2))",
  },
  CSRF: {
    label: "CSRF",
    color: "hsl(var(--chart-3))",
  },
  XXE: {
    label: "XXE",
    color: "hsl(var(--chart-4))",
  },
  SSRF: {
    label: "SSRF",
    color: "hsl(var(--chart-5))",
  },
};

const chartKeys = [
  "Total",
  "Overflow",
  "Memory Corruption",
  "SQL Injection",
  "XSS",
  "Directory Traversal",
  "File Inclusion",
  "CSRF",
  "XXE",
  "SSRF",
];


export function VulnerabilityGraph() {
  const [data, setData] = useState(null);
  const [isHovered, setIsHovered] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [totalCount, setTotalCount] = useState(0);
  const [error, setError] = useState(null);
  const [activeChart, setActiveChart] = React.useState("Total");
  const handleCategoryClick = (category) => {
    setActiveChart(category);


    // Calculate the total for the selected category
    const total = data.reduce((acc, item) => acc + item[category], 0);
    setTotalCount(total);
  };


  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(`${process.env.SERVER_URL}/api/cve/weaknesses/stats`);
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        const jsonData = await response.json();
        console.log("Fetched data:", jsonData); // Log the fetched data
        setData(jsonData);
        // Calculate the initial total for the "Total" category
        const initialTotal = jsonData.reduce((acc, item) => acc + item.Total, 0);
        setTotalCount(initialTotal);

      } catch (error) {
        setError(error.message);
        console.error("Error fetching data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    if (!data) return;
  
    const interval = setInterval(() => {
      if (!isHovered) {
        setActiveChart((prevChart) => {
          const currentIndex = chartKeys.indexOf(prevChart);
          const nextIndex = (currentIndex + 1) % chartKeys.length;
          const nextChart = chartKeys[nextIndex];
  
          const total = data.reduce((acc, item) => acc + item[nextChart], 0);
          setTotalCount(total);
          return nextChart;
        });
      }
    }, 8000); // 8 seconds
  
    return () => clearInterval(interval);
  }, [data, isHovered]);
  

  if (isLoading) {
    return (
      <Card className="w-full md:w-2/3  rounded-lg bg-slate-950/75 backdrop-blur-sm">
        <CardContent className="flex items-center justify-center min-h-[300px]">
          <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="w-full md:w-2/3  rounded-lg bg-slate-950/75 backdrop-blur-sm">
        <CardContent className="flex items-center justify-center min-h-[300px] text-destructive">
          Error loading data: {error}
        </CardContent>
      </Card>
    );
  }
  const CharData = data;

  return (
    <Card className="w-full md:w-full  rounded-lg bg-slate-950/75 backdrop-blur-sm">
      <CardHeader className="flex flex-col space-y-0 border-b p-0 sm:p-6">
  <div className="flex items-center justify-between px-6 py-5 sm:py-6">
    {/* Left Side: Title + Description */}
    <div className="flex flex-col justify-center gap-1">
      <CardDescription className="text-[#00CBF0] text-lg font-semibold">
        Vulnerabilities by Type & Year
      </CardDescription>
      <CardTitle className="text-2xl">{totalCount.toLocaleString()}</CardTitle>
    </div>

    {/* Right Side: Dropdown */}
    <div className="ml-auto">
    <select
  value={activeChart}
  onChange={(e) => handleCategoryClick(e.target.value)}
  className="bg-muted/20 text-muted-foreground px-4 py-2 rounded-md border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-400 transition-all"
>
  {[
    "Total",
    "Overflow",
    "Memory Corruption",
    "SQL Injection",
    "XSS",
    "Directory Traversal",
    "File Inclusion",
    "CSRF",
    "XXE",
    "SSRF",
  ].map((key) => (
    <option
      key={key}
      value={key}
      className="bg-muted/20 text-muted-foreground"
    >
      {key}
    </option>
  ))}
</select>

    </div>
  </div>
</CardHeader>

      <CardContent className="px-2 sm:p-6"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}>
        <ChartContainer className=" md:min-h-[120px]" config={chartConfig}>
          <AreaChart
            accessibilityLayer
            data={data}
            margin={{
              left: 0,
              top:15,
              right: 0,
            }}
          >
            <CartesianGrid vertical={false} />
            <YAxis tickLine={false} axisLine={false} />
            <XAxis
              dataKey="date"
              tickLine={false}
              axisLine={false}
              tickMargin={12}
              tickFormatter={(value) => value.slice(0, 4)}
            />
            <ChartTooltip cursor={false} content={<ChartTooltipContent />} />
            <ChartLegend position content={<ChartLegendContent />} />
            <defs>
              <linearGradient
                id={`fill${activeChart}`}
                x1="0"
                y1="0"
                x2="0"
                y2="1"
              >
                <stop
                  offset="5%"
                  stopColor={`var(--color-${activeChart})`}
                  stopOpacity={0.8}
                />
                <stop
                  offset="95%"
                  stopColor={`var(--color-${activeChart})`}
                  stopOpacity={0.1}
                />
              </linearGradient>
            </defs>
            <Area
              dataKey={activeChart}
              type="natural"
              fill={`url(#fill${activeChart})`}
              fillOpacity={0.4}
              stroke={chartConfig[activeChart].color}
              stackId="a"
              animationDuration={1000} // 1 second smooth transition
              animationEasing="ease-in-out"
            />
          </AreaChart>
        </ChartContainer>
      </CardContent>

    </Card>
  );
}
export default VulnerabilityGraph;
