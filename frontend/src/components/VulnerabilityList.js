import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import CVEBlock from "@/components/CVEBlock";
import { DateSelector } from "@/components/DateSelector";
import Navbar from "@/components/Navbar";
import { getVendorDataByDate } from "@/lib/fetch";
import CVESkeletonPage from "./CVESkeletonPage";

const PAGE_LIMIT_OPTIONS = [10, 20, 30];

const VulnerabilityList = () => {
  const { vendor = "default-vendor" } = useParams();
  const [selectedYear, setSelectedYear] = useState("all");
  const [selectedMonth, setSelectedMonth] = useState("all");
  const [selectedSortBy, setSelectedSortBy] = useState("publishDate");
  const [selectedOrder, setSelectedOrder] = useState("desc");
  const [limit, setLimit] = useState(PAGE_LIMIT_OPTIONS[0]);

  // Filter control states (used by dropdowns and filter button)
  const [filterParams, setFilterParams] = useState({
    year: selectedYear,
    month: selectedMonth,
    sortBy: selectedSortBy,
    order: selectedOrder,
    limit: limit,
  });

  const [vulnerabilityList, setVulnerabilityList] = useState([]);
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  // Dropdown options for ascending/descending based on selectedSortBy
  const orderOptions =
    selectedSortBy === "cveId" ||
    selectedSortBy === "cvssScore" ||
    selectedSortBy === "epssScore"
      ? [
          { value: "asc", label: "Ascending" },
          { value: "desc", label: "Descending" },
        ]
      : [
          { value: "desc", label: "Newest First" },
          { value: "asc", label: "Oldest First" },
        ];

  const handleFilterClick = async () => {
    setLoading(true);
    setPage(1); // Reset to the first page when applying a new filter
    setFilterParams({
      year: selectedYear,
      month: selectedMonth,
      sortBy: selectedSortBy,
      order: selectedOrder,
      limit: limit,
    });
    await fetchFilteredData();
    setLoading(false);
  };

  const fetchFilteredData = async () => {
    setLoading(true);
    const data = await getVendorDataByDate(
      vendor,
      filterParams.year,
      filterParams.month,
      filterParams.sortBy,
      filterParams.order,
      page,
      filterParams.limit
    );
    if (data) {
      setVulnerabilityList(data.vulnerabilities || []);
      setTotalPages(data.pagination.pages);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchFilteredData();
  }, [vendor, filterParams, page]); // Only trigger when filter or page changes

  if (loading) {
    return <CVESkeletonPage />; // Show skeleton loader while loading
  }


  const handleNextPage = () => {
    if (page < totalPages) setPage(page + 1);
  };

  const handlePreviousPage = () => {
    if (page > 1) setPage(page - 1);
  };

  return (
    <div className="min-h-screen w-full flex justify-center items-center">
      <div className="text-white justify-start bg-slate-950/30 flex flex-col mb-4 pt-4 mx-10 overflow-x-hidden backdrop-blur-md shadow-lg rounded-lg min-h-screen w-full md:w-4/5">
        <div className="items-start px-7 shadow-lg bg-slate-950/30 py-7 ">
          <div className="flex flex-col md:flex-row content-center space-x-4 my-4">
            <p className="place-content-center">Published in:</p>
            <DateSelector
              selectedDate={`${selectedYear}-${selectedMonth}`}
              onChange={(newDate) => {
                const [year, month] = newDate.split("-");
                setSelectedYear(year);
                setSelectedMonth(month);
              }}
            />
          </div>
          <div className="flex flex-col md:flex-row space-x-4 my-4">
            <select
              value={selectedSortBy}
              onChange={(e) => {
                setSelectedSortBy(e.target.value);
                if (
                  e.target.value === "cveId" ||
                  e.target.value === "cvssScore" ||
                  e.target.value === "epssScore"
                ) {
                  setSelectedOrder("asc"); // Default to ascending for these fields
                } else {
                  setSelectedOrder("desc"); // Default to newest first for publishDate
                }
              }}
              className="bg-gray-700 text-white px-3 py-2 rounded w-full md:w-auto"
            >
              <option value="publishDate">Sort by Date</option>
              <option value="cveId">Sort by CVE ID</option>
              <option value="cvssScore">Sort by CVSS Score</option>
              <option value="epssScore">Sort by EPSS Score</option>
            </select>
            <select
              value={selectedOrder}
              onChange={(e) => setSelectedOrder(e.target.value)}
              className="bg-gray-700 text-white px-3 py-2 rounded w-full md:w-auto"
            >
              {orderOptions.map((opt) => (
                <option key={opt.value} value={opt.value}>
                  {opt.label}
                </option>
              ))}
            </select>
            <select
              value={limit}
              onChange={(e) => setLimit(Number(e.target.value))}
              className="bg-gray-700 text-white px-3 py-2 rounded w-full md:w-auto"
            >
              {PAGE_LIMIT_OPTIONS.map((opt) => (
                <option key={opt} value={opt}>
                  {opt} records per page
                </option>
              ))}
            </select>
            <button
              onClick={handleFilterClick}
              className="bg-blue-600 text-white py-2 px-4 rounded mt-4 md:mt-0"
            >
              Filter
            </button>
          </div>
          <div className="flex justify-between items-center mt-4 gap-5">
            <button
              onClick={handlePreviousPage}
              disabled={page === 1}
              className="ml-2 px-2 w-full md:w-24 py-1 bg-blue-500 text-white rounded disabled:opacity-50 hover:bg-blue-600"
            >
              Previous
            </button>
            <span className="text-white">
              Page {page} of {totalPages}
            </span>
            <button
              onClick={handleNextPage}
              disabled={page === totalPages}
              className="ml-2 px-2 w-full md:w-24 py-1 bg-blue-500 text-white rounded disabled:opacity-50 hover:bg-blue-600"
            >
              Next
            </button>
          </div>
        </div>

        <div className="items-start w-full">
          {vulnerabilityList.length > 0 ? (
            vulnerabilityList.map((vuln, index) => (
              <div
                key={vuln.cveId}
                className="flex flex-col md:flex-row w-full px-5 items-center space-x-4"
              >
                <p className="text-xl text-gray-400 w-6 text-right">
                  {(page - 1) * limit + index + 1}.
                </p>
                <div className="w-full mx-auto">
                  <CVEBlock className="block" data={vuln} />
                </div>
              </div>
            ))
          ) : (
            <p>No data available.</p>
          )}
        </div>
        <div className="flex justify-between items-center mt-4 mb-4 px-7 gap-5">
          <button
            onClick={handlePreviousPage}
            disabled={page === 1}
            className="ml-2 px-2 w-full md:w-24 py-1 bg-blue-500 text-white rounded disabled:opacity-50 hover:bg-blue-600"
          >
            Previous
          </button>
          <span className="text-white">
            Page {page} of {totalPages}
          </span>
          <button
            onClick={handleNextPage}
            disabled={page === totalPages}
            className="ml-2 px-2 w-full md:w-24 py-1 bg-blue-500 text-white rounded disabled:opacity-50 hover:bg-blue-600"
          >
            Next
          </button>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityList;
