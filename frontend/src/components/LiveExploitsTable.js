"use client";
import { useState, useEffect } from "react";
import { getLiveExploits } from "@/lib/fetch";
import Link from "next/link";

export default function LiveExploitsTable() {
  // Temporary Data (To be replaced with API data)
  const [exploits, setExploits] = useState([]);

  useEffect(() => {
    const fetchExploitsData = async () => {
      try {
        const getRelativeTime = (dateString) => {
          const date = new Date(dateString);
          const currentTime = new Date();
          const timeDiff = currentTime - date;
          const seconds = Math.floor(timeDiff / 1000);
          const minutes = Math.floor(seconds / 60);
          const hours = Math.floor(minutes / 60);
          const days = Math.floor(hours / 24);

          if (days >= 30) {
            const months = Math.floor(days / 30);
            return months === 1 ? "1 month ago" : `${months} months ago`;
          } else if (days >= 7) {
            const weeks = Math.floor(days / 7);
            return weeks === 1 ? "1 week ago" : `${weeks} weeks ago`;
          } else if (days >= 2) {
            return `${days} days ago`;
          } else if (days === 1) {
            return "Yesterday";
          } else if (hours >= 2) {
            return `${hours} hours ago`;
          } else if (hours === 1) {
            return "1 hour ago";
          } else if (minutes >= 2) {
            return `${minutes} minutes ago`;
          } else if (minutes === 1) {
            return "1 minute ago";
          } else {
            return "Just now";
          }
        };


        // Example API call (Replace with actual API)
        const data = await getLiveExploits();
        const liveExploits = data && data.liveExploits;
        const transformedExploits = liveExploits && liveExploits.length > 0
          ? liveExploits.map(exploit => {
            const uniqueProducts = Array.from(new Set(exploit.affected_products));
            const firstProduct = uniqueProducts[0].replace(/_/g, ' '); // Replace underscores with spaces
            const productCount = uniqueProducts.length - 1; // Count of products minus one
            return {
              cve_id: exploit.cve_id,
              products: `${firstProduct} +${productCount}`,
              cvss_score: exploit.cvss_score,
              last_updated: getRelativeTime(exploit.last_updated)
            };
          })
          : [];
        setExploits(transformedExploits);

        console.log("Fetched Live Exploits Data:", transformedExploits);
      } catch (error) {
        console.error("Error fetching exploits data:", error);
      }
    };

    fetchExploitsData();
  }, []);

  return (
    <div className="bg-slate-950/75 backdrop-blur-md border border-white/20 rounded-lg shadow-lg p-4 h-full">
      <h2 className="text-lg font-semibold text-white mb-4">Most affected CVE's</h2>

      {/* Scrollable Table Container */}
      <div className="overflow-y-auto scrollbar max-h-[270px]">
        <table className="w-full text-left border-collapse">
          <thead>
            <tr className="text-white border-b border-white/20">
              <th className="py-2 px-3">CVE ID</th>
              <th className="py-2 px-3">Affected Products</th>
              <th className="py-2 px-3">CVSS Score</th>
              <th className="py-2 px-3">Last Updated</th>
            </tr>
          </thead>
          <tbody>
            {exploits.map((exploit, index) => (
              <tr key={index} className="text-gray-300 border-b border-white/10 hover:bg-slate-900 transition-all">
                <td className="py-2 px-3 text-[#00B3F3] cursor-pointer hover:underline">
                  <Link
                    href={`/cve/${exploit.cve_id}`}
                  >
                    {exploit.cve_id}
                  </Link>
                </td>
                <td className="py-2 px-3 text-[#00B3F3] cursor-pointer hover:underline">
                  <Link
                    href={`/product/${exploit.products.split('+')[0].replace(/_/g, ' ')}`}
                  >
                    {exploit.products}
                  </Link>
                </td>
                <td
                  className={`py-2 px-3 font-black text-center ${exploit.cvss_score === "N/A"
                    ? " "
                    : exploit.cvss_score < 3
                      ? "text-green-500 "
                      : exploit.cvss_score >= 3 && exploit.cvss_score < 7.5
                        ? "text-yellow-500 "
                        : exploit.cvss_score >= 7.5
                          ? "text-red-600 "
                          : ""
                    }`}
                >
                  {exploit.cvss_score ?? "N/A"}
                </td>

                <td className="py-2 px-3">{exploit.last_updated}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}